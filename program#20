/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tarefasdamozona;
import java.util.Random;
/**
 *
 * @author alexsander
 */
public class TarefasDaMozona {

    public static Random number;
    public static int compare;
    public static int swaps;

    public static void main(String[] args)
        {          
    int []intergersSequenceBubble;
    int []intergersSequenceSelection;
    int []intergersSequenceInsertion;
    int SIZE = 1024;
    
    for(int i = 0; i < 11; ++i){
       intergersSequenceBubble = new int[SIZE];
       intergersSequenceSelection = new int[SIZE];
       intergersSequenceInsertion = new int[SIZE];
       
       if(SIZE == 1024 || SIZE == 2048 || SIZE == 4096 || SIZE == 1048576){
       for(int j = 0; j < SIZE; ++j){
       intergersSequenceBubble[j] = nextNumber();
       intergersSequenceSelection[j] = nextNumber();
       intergersSequenceInsertion[j] = nextNumber();
       }
       
       bubbleSort(intergersSequenceBubble);
       System.out.println("For "+SIZE+" the number of swaps by insertion sort are "+getSwap()+". Comparisons made: "+getCompare());
       selectionSort(intergersSequenceSelection);
       System.out.println("For "+SIZE+" the number of swaps by insertion sort are "+getSwap()+". Comparisons made: "+getCompare());
       insertionSort(intergersSequenceInsertion);
       System.out.println("For "+SIZE+" the number of swaps by insertion sort are "+getSwap()+". Comparisons made: "+getCompare());
       
        }
       SIZE *= 2;
      }           
    } 

     public static void insertionSort(int[] array)
   {
      int compare = 0;
      int swaps = 0;
      int unsortedValue;  // The first unsorted value
      int scan;           // Used to scan the array
      
      for (int index = 1; index < array.length; index++)
      {
         unsortedValue = array[index];
         scan = index;
         
         while (scan > 0 && array[scan-1] > unsortedValue)
         {  
            compare++;
            swaps++;              
            array[scan] = array[scan - 1];
            scan--;
         }
         if(scan > 0)
            compare++;
         
          array[scan] = unsortedValue;
      }
      setCompare(compare);
      setSwap(swaps);
   }
 
     public static void selectionSort(int[] array)
   {
      int compare = 0;
      int swaps = 0;
      boolean check;
      int startScan;   // Starting position of the scan
      int index;       // To hold a subscript value
      int minIndex;    // Element with smallest value in the scan
      int minValue;    // The smallest value found in the scan
          //6-5
          //5-1
          //4-7
          //3-4
          //2-3
          //1-2
          //0-4
      for (startScan = 0; startScan < (array.length-1); startScan++)//0 Ã  6(0 < 7) 
      {
         check = false;
         minIndex = startScan;//minIndex = 0
         minValue = array[startScan];//minValue = 4
         for(index = startScan + 1; index < array.length; index++)//1 < 7
         {
            if (array[index] < minValue)//2 < 4
            {  compare++;
               minValue = array[index]; 
               minIndex = index; 
               check = true;
            }
            else
               compare++;
         }
         if(check)
         swaps++;
         
         array[minIndex] = array[startScan]; 
         array[startScan] = minValue; 
      }
      setCompare(compare);
      setSwap(swaps);
   }
     
     public static void bubbleSort(int[] array)
   {   
      int compare = 0;
      int swaps = 0;
      int maxElement;  // Marks the last element to compare
      int index;       // Index of an element to compare
      int temp;        // Used to swap to elements
      
        
      for (maxElement = array.length - 1; maxElement >= 0; maxElement--)
      {
         for (index = 0; index <= maxElement - 1; index++)
         {
            if (array[index] > array[index + 1])
            {  compare++;
               swaps++;
               temp = array[index]; 
               array[index] = array[index + 1];
               array[index + 1] = temp;
            }
            else
               compare++;
         }
      }
      setCompare(compare);
      setSwap(swaps);
   }
     
   public static void setCompare(int compar){
        compare = compar;        
   }
   
   public static int getCompare(){
       return compare;
   }
   
   public static void setSwap(int swap){
        swaps = swap;        
   }
   
   public static int getSwap(){
       return swaps;
   }
   
   public static void seed()
 {
  number = new Random();
 }

 public static int nextNumber()
 {
  if (number == null)
   seed();

  return number.nextInt(999);
 }      
}
